# 用Jekyll在本地配置你的GitHub Pages网站
你可以配置你的Jekyll GitHub Pages网站的本地版本，用来测试本地网站。推荐你安装Jekyll来预览你的网站和帮助你解决Jekyll构建失败问题。

##### 本篇讲解内容：
* 需求
* Step1:为你的Jekyll网站创建本地仓库
* Step2:用打包机安装Jekyll
* Step3(可选):生成Jekyll网站文件
* Step4:构建本地Jekyll网站
* 保持你的网站随着GitHub Pages gem更新
* Next steps:配置Jekyll
* 更多阅读

Jekyll没有Windows的官方支持，在Jekyll官方文档中查看更多信息：[Jekyll on Windows](http://jekyllrb.com/docs/windows/#installation)。

### 需求
环境配置

我们推荐使用[Bundler](http://bundler.io/)安装和运行Jekyll. Bundler管理Ruby gem 依赖，减少Jekyll构建错误，而且减少了涉及到环境的bugs,要安装Bundler,你必须安装[Ruby](https://www.ruby-lang.org/).

1.打开Git Bash.

2.检查你是否安装了Ruby2.0.0或者更高的版本：
```
$ ruby --version
ruby 2.x.x
```

3.如果你没有安装Ruby,那么[安装Ruby 2.0.0或更高版本](https://www.ruby-lang.org/en/downloads/);

4.安装Bundler:
```
$ gem install bundler
# Installs the Bundler gem
```

5.如果你已经有一个Jekyll网站的本地仓库，跳到Step2.

### Step1:为你的Jekyll网站创建本地仓库
1.安装Git,设置Git:[Set up Git](https://help.github.com/articles/set-up-git/);

2.打开 Git Bash;

3.在本地为你的Jekyll初始化一个Git 仓库；
```
$ git init my-site
Initialized empty Git repository in /Users/octocat/my-site/.git/
```

4.进入刚创建的新仓库；

5.如果你的本地仓库是为了创建一个[Project pages site](https://help.github.com/articles/user-organization-and-project-pages/),那么创建一个新分支：gh-pages;

**Note**: You can skip this step if you would rather use the master branch for your Project Page. If you haven't checked out any branches, once you make a commit in your local repository, your change will appear on the master branch by default.

```
$ git checkout -b gh-pages
Switched to a new branch 'gh-pages'
```
**Tip**: To learn more about creating a User, Organization or Project Page and which branch to use, see "User, Organization, and Project Pages." To learn more about how to build your site's source files from a /docs folder on the master branch, see "Configuring a publishing source for GitHub Pages."

### Step2: 用Bundler安装Jekyll

为了跟踪你的网站依赖，Ruby将使用你的Gemfile的目录来构建你的Jekyll网站。

1.检查你的本地Jekyll网站仓库中是否有一个Gemfile.
```
$ ls
Gemfile
```
如果有，那么跳到第4步.如果没有，继续往下看。

2.如果你没有一个Gemfile,打开你最喜欢的文本编辑器，例如Atom,添加如下几行到一个新文件中：
```
source 'https://rubygems.org'
gem 'github-pages',group: :jekyll-plugins
```
3.位该文件取名为“Gemfile”，将其保存到你的本地Jekyll网站仓库的根目录，跳转到第5步去安装Jekyll.

4.如果你有一个Gemfile,打开你最喜欢的文本编辑器，例如Atom,添加如下几行到一个新文件中：
```
source 'https://rubygems.org'
gem 'github-pages', group: :jekyll_plugins

```

5.从GitHub Pages gem安装Jekyll和其他[依赖](https://pages.github.com/versions/)；

```
$ bundle install

```

### Step3(optional): Generate Jekyll site files
为了构建你的本地Jekyll,预览网站修改和解决构建错误问题，在本地必须要有Jekyll网站文件。你可能克隆了一个Jekyll网站仓库到你的本地了。如果没有的话，你可以在你的本地仓库中用一个基本的Jekyll模板网站生成Jekyll网站文件。

如果你想使用GitHub上存在的Jekyll网站仓库作为你的Jekyll网站的模板，fork并且clone这个Jekyll网站仓库到本地。可以看看：[Fork a repo](https://help.github.com/articles/fork-a-repo/);

**Note**: As of Jekyll 3.2, the default Jekyll site contains a Gemfile that locks Jekyll to the Gem version you build it with. To instead lock it to the version used by GitHub Pages, you'll uncomment the gem "github-pages", group :jekyll_plugins line in the steps below.

1.如果本地没有Jekyll网站，那么创建一个Jekyll模板网站：
```
$ bundle exec jekyll new . --force
New jekyll site installed in /Users/octocat/my-site.
```

2.编辑你的Gemfile并且一处下面一行：
```
$ "jekyll", "3.2.1"
```

3.取消如下行的注释：
```
$ gem "github-pages",group :jekyll_plugins
```
4.编辑Jekyll模板网站，做一些修改并且保存。不用使用git提交你就能在本地预览你的修改。

如果你想要发布你的修改到你的网站，你必须提交修改并push到GitHub上去，要学习Githe GitHub的知识，请看：[Good Resources for Learning Git and GitHub](https://help.github.com/articles/good-resources-for-learning-git-and-github/)或者[Git cheat sheet](https://help.github.com/articles/git-cheatsheet);

### Step4:构建你的本地Jekyll 网站
1.进入你的本地Jekyll网站仓库的根目录。

2.在本地运行你的Jekyll 网站。
```
$ bundle exec jecyll serve
```

3.在浏览器中输入：http://localhost:4000来预览你的网站。


### 保持你的网站随着GitHub Pages gem更新

Jekyll 是一个[ active open source project](https://github.com/jekyll/jekyll)而且更新频繁，当GitHub Pages服务器更新时，你的电脑上的软件可能会过时，造成你的本地网站和发布到Github取得==去的样子不一样。

1.打开Git Bash.

2.运行更新命令：

\>如果一步步跟着我们设置并且安装Bundler，那么运行Bundle update github-pages或者简单地bundle update,你的gems将会更新到最新版本。

\> 如果你没安装B，运行gem update github-pages

### Next steps:配置Jekyll.
哟啊更进一步配置你的网站，看：[ Configuring Jekyll](https://help.github.com/articles/configuring-jekyll),要设置Project pages网站，请看：[ Jekyll's official documentation on project pages URLs](http://jekyllrb.com/docs/github-pages/#project-page-url-structure).

### 更多阅读
[Troubleshooting GitHub Pages Builds](https://help.github.com/articles/troubleshooting-github-pages-builds)

[Using Jekyll as a static site generator with GitHub Pages](https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/)

[Jekyll's official GitHub Pages documentation](http://jekyllrb.com/docs/github-pages/)

[Jekyll commands](http://jekyllrb.com/docs/usage/)
